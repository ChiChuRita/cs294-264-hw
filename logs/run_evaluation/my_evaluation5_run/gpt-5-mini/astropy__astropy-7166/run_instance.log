2025-10-03 11:24:04,043 - INFO - Creating container for astropy__astropy-7166...
2025-10-03 11:24:04,114 - INFO - Container for astropy__astropy-7166 created: 796aabc1e6dd1d7e213aa1c13fe3cc7ece933071f3f177bf46cd697cf5f130fd
2025-10-03 11:24:04,272 - INFO - Container for astropy__astropy-7166 started: 796aabc1e6dd1d7e213aa1c13fe3cc7ece933071f3f177bf46cd697cf5f130fd
2025-10-03 11:24:04,272 - INFO - Intermediate patch for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation5_run/gpt-5-mini/astropy__astropy-7166/patch.diff, now applying to container...
2025-10-03 11:24:04,428 - INFO - >>>>> Applied Patch:
Checking patch astropy/utils/misc.py...
Applied patch astropy/utils/misc.py cleanly.

2025-10-03 11:24:05,952 - INFO - Git diff before:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..bf59ddde2 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,55 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if not is_public_member(key):
+                continue
+
+            # Determine if this member is a plain function or a descriptor
+            # wrapping a function (property, classmethod, staticmethod).
+            func = None
+            wrapper_doc = getattr(val, '__doc__', None)
+            if inspect.isfunction(val):
+                func = val
+            elif isinstance(val, classmethod) or isinstance(val, staticmethod):
+                func = getattr(val, '__func__', None)
+            elif isinstance(val, property):
+                func = getattr(val, 'fget', None)
+
+            # If either the wrapper or the underlying function already has a
+            # docstring, don't overwrite it.
+            if (wrapper_doc is not None) or (func is not None and getattr(func, '__doc__', None) is not None):
+                continue
+
+            for base in cls.__mro__[1:]:
+                super_method = getattr(base, key, None)
+                if super_method is None:
+                    continue
+
+                # Get docstring from the superclass method, handling descriptors.
+                super_doc = getattr(super_method, '__doc__', None)
+                if isinstance(super_method, classmethod) or isinstance(super_method, staticmethod):
+                    super_doc = getattr(getattr(super_method, '__func__', None), '__doc__', super_doc)
+                elif isinstance(super_method, property):
+                    super_doc = getattr(getattr(super_method, 'fget', None), '__doc__', super_doc)
+
+                if super_doc:
+                    if func is not None:
+                        try:
+                            func.__doc__ = super_doc
+                        except Exception:
+                            # Be conservative: if we can't set it, try setting on
+                            # the wrapper itself.
+                            try:
+                                val.__doc__ = super_doc
+                            except Exception:
+                                pass
+                    else:
+                        # Fallback: set on wrapper if possible
+                        try:
+                            val.__doc__ = super_doc
+                        except Exception:
+                            pass
+                    break
 
         super().__init__(name, bases, dct)
2025-10-03 11:24:05,952 - INFO - Eval script for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation5_run/gpt-5-mini/astropy__astropy-7166/eval.sh; copying to container...
2025-10-03 11:24:26,466 - INFO - Test runtime: 20.46 seconds
2025-10-03 11:24:26,467 - INFO - Test output for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation5_run/gpt-5-mini/astropy__astropy-7166/test_output.txt
2025-10-03 11:24:26,589 - INFO - Git diff after:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..bf59ddde2 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,55 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if not is_public_member(key):
+                continue
+
+            # Determine if this member is a plain function or a descriptor
+            # wrapping a function (property, classmethod, staticmethod).
+            func = None
+            wrapper_doc = getattr(val, '__doc__', None)
+            if inspect.isfunction(val):
+                func = val
+            elif isinstance(val, classmethod) or isinstance(val, staticmethod):
+                func = getattr(val, '__func__', None)
+            elif isinstance(val, property):
+                func = getattr(val, 'fget', None)
+
+            # If either the wrapper or the underlying function already has a
+            # docstring, don't overwrite it.
+            if (wrapper_doc is not None) or (func is not None and getattr(func, '__doc__', None) is not None):
+                continue
+
+            for base in cls.__mro__[1:]:
+                super_method = getattr(base, key, None)
+                if super_method is None:
+                    continue
+
+                # Get docstring from the superclass method, handling descriptors.
+                super_doc = getattr(super_method, '__doc__', None)
+                if isinstance(super_method, classmethod) or isinstance(super_method, staticmethod):
+                    super_doc = getattr(getattr(super_method, '__func__', None), '__doc__', super_doc)
+                elif isinstance(super_method, property):
+                    super_doc = getattr(getattr(super_method, 'fget', None), '__doc__', super_doc)
+
+                if super_doc:
+                    if func is not None:
+                        try:
+                            func.__doc__ = super_doc
+                        except Exception:
+                            # Be conservative: if we can't set it, try setting on
+                            # the wrapper itself.
+                            try:
+                                val.__doc__ = super_doc
+                            except Exception:
+                                pass
+                    else:
+                        # Fallback: set on wrapper if possible
+                        try:
+                            val.__doc__ = super_doc
+                        except Exception:
+                            pass
+                    break
 
         super().__init__(name, bases, dct)
2025-10-03 11:24:26,589 - INFO - Grading answer for astropy__astropy-7166...
2025-10-03 11:24:26,590 - INFO - report: {'astropy__astropy-7166': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/utils/tests/test_misc.py::test_inherit_docstrings']}, 'PASS_TO_PASS': {'success': ['astropy/utils/tests/test_misc.py::test_isiterable', 'astropy/utils/tests/test_misc.py::test_signal_number_to_name_no_failure', 'astropy/utils/tests/test_misc.py::test_skip_hidden', 'astropy/utils/tests/test_misc.py::test_JsonCustomEncoder', 'astropy/utils/tests/test_misc.py::test_check_broadcast', 'astropy/utils/tests/test_misc.py::test_dtype_bytes_or_chars'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7166: resolved: False
2025-10-03 11:24:26,591 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7166.my_evaluation5_run...
2025-10-03 11:24:41,709 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7166.my_evaluation5_run...
2025-10-03 11:24:41,715 - INFO - Container sweb.eval.astropy__astropy-7166.my_evaluation5_run removed.
