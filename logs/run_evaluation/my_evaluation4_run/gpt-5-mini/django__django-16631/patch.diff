diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..5d2ebcb788 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -5,7 +5,7 @@ from django.apps import apps as django_apps
 from django.conf import settings
 from django.core.exceptions import ImproperlyConfigured, PermissionDenied
 from django.middleware.csrf import rotate_token
-from django.utils.crypto import constant_time_compare
+from django.utils.crypto import constant_time_compare, salted_hmac
 from django.utils.module_loading import import_string
 from django.views.decorators.debug import sensitive_variables
 
@@ -17,6 +17,49 @@ HASH_SESSION_KEY = "_auth_user_hash"
 REDIRECT_FIELD_NAME = "next"
 
 
+def _session_auth_hash_matches(stored_hash, user):
+    """
+    Return True if stored_hash matches the user's current session auth hash
+    or any hash generated using SECRET_KEY_FALLBACKS.
+
+    This allows sessions created with older SECRET_KEY values (listed in
+    settings.SECRET_KEY_FALLBACKS) to remain valid until those fallbacks are
+    intentionally removed.
+    """
+    if not stored_hash:
+        return False
+
+    # Key salt must match the one used in AbstractBaseUser.get_session_auth_hash.
+    key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
+
+    # First try the current hash generated by the user method.
+    try:
+        current = user.get_session_auth_hash()
+    except Exception:
+        current = None
+
+    if current and constant_time_compare(stored_hash, current):
+        return True
+
+    # Try any fallback secrets.
+    fallbacks = getattr(settings, "SECRET_KEY_FALLBACKS", None) or []
+    for fallback in fallbacks:
+        try:
+            fallback_hash = salted_hmac(
+                key_salt,
+                user.password,
+                secret=fallback,
+                algorithm="sha256",
+            ).hexdigest()
+        except Exception:
+            # If anything goes wrong generating a fallback hash, skip it.
+            continue
+        if constant_time_compare(stored_hash, fallback_hash):
+            return True
+
+    return False
+
+
 def load_backend(path):
     return import_string(path)()
 
@@ -106,9 +149,7 @@ def login(request, user, backend=None):
     if SESSION_KEY in request.session:
         if _get_user_session_key(request) != user.pk or (
             session_auth_hash
-            and not constant_time_compare(
-                request.session.get(HASH_SESSION_KEY, ""), session_auth_hash
-            )
+            and not _session_auth_hash_matches(request.session.get(HASH_SESSION_KEY, ""), user)
         ):
             # To avoid reusing another user's session, create a new, empty
             # session if the existing session corresponds to a different
@@ -199,9 +240,7 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
+                session_hash_verified = session_hash and _session_auth_hash_matches(session_hash, user)
                 if not session_hash_verified:
                     request.session.flush()
                     user = None
@@ -228,3 +267,4 @@ def update_session_auth_hash(request, user):
     request.session.cycle_key()
     if hasattr(user, "get_session_auth_hash") and request.user == user:
         request.session[HASH_SESSION_KEY] = user.get_session_auth_hash()
+
