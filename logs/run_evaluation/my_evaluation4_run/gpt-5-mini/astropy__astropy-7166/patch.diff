diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..843e2115a 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,14 +528,55 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
-                for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
-                        break
+            if (is_public_member(key) and getattr(val, '__doc__', None) is None):
+                # Support regular functions, classmethod/staticmethod wrappers,
+                # and properties. For functions and wrapped functions
+                # (classmethod/staticmethod) try to set the underlying function's
+                # __doc__; for properties, copy docs for fget/fset/fdel and the
+                # property's own __doc__ where possible.
+                if inspect.isfunction(val):
+                    target_getter = lambda v: v
+                elif isinstance(val, (classmethod, staticmethod)):
+                    target_getter = lambda v: v.__func__
+                elif isinstance(val, property):
+                    target_getter = None
+                else:
+                    target_getter = None
+
+                if target_getter is not None:
+                    target = target_getter(val)
+                    for base in cls.__mro__[1:]:
+                        super_method = getattr(base, key, None)
+                        if super_method is not None:
+                            doc = getattr(super_method, '__doc__', None)
+                            if doc:
+                                try:
+                                    target.__doc__ = doc
+                                except Exception:
+                                    # Some objects may not allow setting __doc__
+                                    pass
+                                break
+                else:
+                    # Handle property objects specially
+                    if isinstance(val, property):
+                        for base in cls.__mro__[1:]:
+                            super_prop = getattr(base, key, None)
+                            if isinstance(super_prop, property):
+                                try:
+                                    if val.fget and super_prop.fget and getattr(val.fget, '__doc__', None) is None:
+                                        val.fget.__doc__ = super_prop.fget.__doc__
+                                    if val.fset and super_prop.fset and getattr(val.fset, '__doc__', None) is None:
+                                        val.fset.__doc__ = super_prop.fset.__doc__
+                                    if val.fdel and super_prop.fdel and getattr(val.fdel, '__doc__', None) is None:
+                                        val.fdel.__doc__ = super_prop.fdel.__doc__
+                                except Exception:
+                                    pass
+                                try:
+                                    if getattr(val, '__doc__', None) is None and getattr(super_prop, '__doc__', None):
+                                        val.__doc__ = super_prop.__doc__
+                                except Exception:
+                                    pass
+                                break
 
         super().__init__(name, bases, dct)
 
