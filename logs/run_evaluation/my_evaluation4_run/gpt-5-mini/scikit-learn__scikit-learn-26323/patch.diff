diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index 4eddd12b1..edd4e4cb7 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -293,18 +293,42 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             Estimator instance.
         """
         super().set_output(transform=transform)
-        transformers = (
-            trans
-            for _, trans, _ in chain(
-                self.transformers, getattr(self, "transformers_", [])
-            )
-            if trans not in {"passthrough", "drop"}
-        )
-        for trans in transformers:
+
+        # Collect transformers from both the user-specified list and any fitted
+        # transformers. We intentionally do not include string specifiers here.
+        to_set = []
+        for _, trans, _ in chain(self.transformers, getattr(self, "transformers_", [])):
+            if trans not in {"passthrough", "drop"}:
+                to_set.append(trans)
+
+        # If a remainder estimator was provided by the user (and it's not a
+        # string specifier), include it as well. This ensures calling
+        # set_output before fitting (e.g. make_column_transformer(...,
+        # remainder=estimator).set_output(...).fit_transform(X)) will correctly
+        # configure the remainder estimator.
+        remainder = getattr(self, "remainder", None)
+        if remainder not in (None, "drop", "passthrough"):
+            to_set.append(remainder)
+
+        for trans in to_set:
+            _safe_set_output(trans, transform=transform)
+
+        return self
+        # string specifier), include it as well. This ensures calling
+        # set_output before fitting (e.g. make_column_transformer(...,
+        # remainder=estimator).set_output(...).fit_transform(X)) will correctly
+        # configure the remainder estimator.
+        remainder = getattr(self, "remainder", None)
+        if remainder not in (None, "drop", "passthrough"):
+            to_set.append(remainder)
+
+        for trans in to_set:
             _safe_set_output(trans, transform=transform)
 
         return self
 
+        return self
+
     def get_params(self, deep=True):
         """Get parameters for this estimator.
 
@@ -1142,3 +1166,5 @@ class make_column_selector:
         if self.pattern is not None:
             cols = cols[cols.str.contains(self.pattern, regex=True)]
         return cols.tolist()
+
+
