diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..cdde3555d4 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -216,6 +216,22 @@ def __add__(self, other):
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
+            # Handle cases like scalar * Point which produce a Mul (e.g. 2.0*Point2D(1, 1)).
+            # In that case extract the Point factor and the scalar and perform the
+            # multiplication so that addition proceeds as expected.
+            from sympy.core.mul import Mul
+            if isinstance(other, Mul):
+                for arg in other.args:
+                    if isinstance(arg, Point):
+                        point_arg = arg
+                        # build the scalar from the remaining Mul args
+                        factor_args = [a for a in other.args if a is not arg]
+                        factor = Mul(*factor_args) if factor_args else S.One
+                        # multiply the point by the scalar to get a Point
+                        o_point = point_arg.__mul__(factor)
+                        s, o = Point._normalize_dimension(self, Point(o_point, evaluate=False))
+                        coords = [simplify(a + b) for a, b in zip(s, o)]
+                        return Point(coords, evaluate=False)
             raise GeometryError("Don't know how to add {} and a Point object".format(other))
 
         coords = [simplify(a + b) for a, b in zip(s, o)]
@@ -278,7 +294,14 @@ def __mul__(self, factor):
         coords = [simplify(x*factor) for x in self.args]
         return Point(coords, evaluate=False)
 
+
+    def __rmul__(self, factor):
+        """Right multiplication: scalar * Point -> delegate to __mul__."""
+        return self.__mul__(factor)
+
     def __neg__(self):
+
+
         """Negate the point."""
         coords = [-x for x in self.args]
         return Point(coords, evaluate=False)
@@ -1349,3 +1372,5 @@ def z(self):
         1
         """
         return self.args[2]
+
+
