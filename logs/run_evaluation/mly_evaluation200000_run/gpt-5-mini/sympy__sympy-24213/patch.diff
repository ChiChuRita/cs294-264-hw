diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..d8699b9f58 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -167,18 +167,22 @@ def _collect_factor_and_dimension(self, expr):
         elif isinstance(expr, Pow):
             factor, dim = self._collect_factor_and_dimension(expr.base)
             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)
-            if self.get_dimension_system().is_dimensionless(exp_dim):
-                exp_dim = 1
-            return factor ** exp_factor, dim ** (exp_factor * exp_dim)
-        elif isinstance(expr, Add):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for addend in expr.args[1:]:
                 addend_factor, addend_dim = \
                     self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
+-                if dim != addend_dim:
++                # Two dimensions may be equivalent (e.g. acceleration*time and velocity)
++                # according to the dimension system even if their Dimension objects
++                # are not structurally equal. Use the dimension system equivalence
++                # check instead of direct equality.
++                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):
+                     raise ValueError(
+                         'Dimension of "{}" is {}, '
+                         'but it should be {}'.format(
+                             addend, addend_dim, dim))
+                 factor += addend_factor
+             return factor, dim
                             addend, addend_dim, dim))
                 factor += addend_factor
             return factor, dim
@@ -203,3 +207,4 @@ def get_units_non_prefixed(self) -> tSet[Quantity]:
         Return the units of the system that do not have a prefix.
         """
         return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))
+
