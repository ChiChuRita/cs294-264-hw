diff --git a/django/forms/models.py b/django/forms/models.py
index dafc11f995..ddc051cc6c 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -367,110 +367,34 @@ class BaseModelForm(BaseForm):
             if (field == NON_FIELD_ERRORS and opts.error_messages and
                     NON_FIELD_ERRORS in opts.error_messages):
                 error_messages = opts.error_messages[NON_FIELD_ERRORS]
-            elif field in self.fields:
-                error_messages = self.fields[field].error_messages
-            else:
-                continue
-
-            for message in messages:
-                if (isinstance(message, ValidationError) and
-                        message.code in error_messages):
-                    message.message = error_messages[message.code]
-
-        self.add_error(None, errors)
-
-    def _post_clean(self):
-        opts = self._meta
-
-        exclude = self._get_validation_exclusions()
-
-        # Foreign Keys being used to represent inline relationships
-        # are excluded from basic field value validation. This is for two
-        # reasons: firstly, the value may not be supplied (#12507; the
-        # case of providing new values to the admin); secondly the
-        # object being referred to may not yet fully exist (#12749).
-        # However, these fields *must* be included in uniqueness checks,
-        # so this can't be part of _get_validation_exclusions().
-        for name, field in self.fields.items():
-            if isinstance(field, InlineForeignKeyField):
-                exclude.append(name)
-
-        try:
-            self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)
-        except ValidationError as e:
-            self._update_errors(e)
-
-        try:
-            self.instance.full_clean(exclude=exclude, validate_unique=False)
-        except ValidationError as e:
-            self._update_errors(e)
-
-        # Validate uniqueness if needed.
-        if self._validate_unique:
-            self.validate_unique()
-
-    def validate_unique(self):
-        """
-        Call the instance's validate_unique() method and update the form's
-        validation errors if any were raised.
-        """
-        exclude = self._get_validation_exclusions()
-        try:
-            self.instance.validate_unique(exclude=exclude)
-        except ValidationError as e:
-            self._update_errors(e)
-
-    def _save_m2m(self):
-        """
-        Save the many-to-many fields and generic relations for this form.
-        """
-        cleaned_data = self.cleaned_data
-        exclude = self._meta.exclude
-        fields = self._meta.fields
-        opts = self.instance._meta
-        # Note that for historical reasons we want to include also
-        # private_fields here. (GenericRelation was previously a fake
-        # m2m field).
-        for f in chain(opts.many_to_many, opts.private_fields):
-            if not hasattr(f, 'save_form_data'):
-                continue
-            if fields and f.name not in fields:
-                continue
-            if exclude and f.name in exclude:
-                continue
-            if f.name in cleaned_data:
-                f.save_form_data(self.instance, cleaned_data[f.name])
-
-    def save(self, commit=True):
-        """
-        Save this form's self.instance object if commit=True. Otherwise, add
-        a save_m2m() method to the form which can be called after the instance
-        is saved manually at a later time. Return the model instance.
-        """
-        if self.errors:
-            raise ValueError(
-                "The %s could not be %s because the data didn't validate." % (
-                    self.instance._meta.object_name,
-                    'created' if self.instance._state.adding else 'changed',
-                )
-            )
-        if commit:
-            # If committing, save the instance and the m2m data immediately.
-            self.instance.save()
-            self._save_m2m()
+def __init__(self, queryset, *, empty_label="---------",
+                 required=True, widget=None, label=None, initial=None,
+                 help_text='', to_field_name=None, limit_choices_to=None,
+                 **kwargs):
+        # If the field is required but an initial value is provided, there's
+        # no need for an empty choice.
+        if required and (initial is not None):
+            self.empty_label = None
         else:
-            # If not committing, add a method to the form to allow deferred
-            # saving of m2m data.
-            self.save_m2m = self._save_m2m
-        return self.instance
-
-    save.alters_data = True
-
-
-class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):
-    pass
-
+            # RadioSelect widgets have an inherent "no selection" state, so
+            # presenting a blank choice (e.g. "---------") is misleading for
+            # required model fields. Detect radio widgets (class or instance)
+            # by checking their input_type and avoid adding an empty_label.
+            is_radio_widget = widget is not None and getattr(widget, 'input_type', None) == 'radio'
+            if required and is_radio_widget:
+                self.empty_label = None
+            else:
+                self.empty_label = empty_label
 
+        # Call Field instead of ChoiceField __init__() because we don't need
+        # ChoiceField.__init__().
+        Field.__init__(
+            self, required=required, widget=widget, label=label,
+            initial=initial, help_text=help_text, **kwargs
+        )
+        self.queryset = queryset
+        self.limit_choices_to = limit_choices_to   # limit the queryset later.
+        self.to_field_name = to_field_name
 def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
                       formfield_callback=None, widgets=None, localized_fields=None,
                       labels=None, help_texts=None, error_messages=None,
