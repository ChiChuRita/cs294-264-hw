diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..2ae6a31c33 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -50,12 +50,14 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
+                # Adapt handler, if needed, but don't mutate the current handler until
+                # the middleware factory has been called successfully. This prevents
+                # MiddlewareNotUsed from "poisoning" the handler for subsequent middlewares.
+                adapted_handler = self.adapt_method_mode(
                     middleware_is_async, handler, handler_is_async,
                     debug=settings.DEBUG, name='middleware %s' % middleware_path,
                 )
-                mw_instance = middleware(handler)
+                mw_instance = middleware(adapted_handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
                     if str(exc):
@@ -85,9 +87,10 @@ class BaseHandler:
                     self.adapt_method_mode(False, mw_instance.process_exception),
                 )
 
+            # Only now update the handler and handler_is_async after successful
+            # middleware instantiation.
             handler = convert_exception_to_response(mw_instance)
             handler_is_async = middleware_is_async
-
         # Adapt the top of the stack, if needed.
         handler = self.adapt_method_mode(is_async, handler, handler_is_async)
         # We only assign to this when initialization is complete as it is used
