2025-10-02 19:32:06,142 - INFO - Creating container for astropy__astropy-7166...
2025-10-02 19:32:06,241 - INFO - Container for astropy__astropy-7166 created: 23d6eb8ee9284b8caf55019d0759db2a04b71eba5fcc4f24ace79c608048604c
2025-10-02 19:32:06,364 - INFO - Container for astropy__astropy-7166 started: 23d6eb8ee9284b8caf55019d0759db2a04b71eba5fcc4f24ace79c608048604c
2025-10-02 19:32:06,364 - INFO - Intermediate patch for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/patch.diff, now applying to container...
2025-10-02 19:32:06,600 - INFO - >>>>> Applied Patch:
Checking patch astropy/utils/misc.py...
Applied patch astropy/utils/misc.py cleanly.

2025-10-02 19:32:08,795 - INFO - Git diff before:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..eab563041 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,13 +528,50 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Handle plain functions, staticmethod/classmethod wrappers, and
+            # properties. For each, determine whether the object defined in
+            # this class is missing a docstring and if so, try to inherit it
+            # from the first base class that provides it.
+            if inspect.isfunction(val):
+                needs_inherit = (val.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        val.__doc__ = doc
+            elif isinstance(val, (staticmethod, classmethod)):
+                func = val.__func__
+                needs_inherit = (func.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        func.__doc__ = doc
+            elif isinstance(val, property):
+                # For properties, inherit the fget docstring (property.__doc__
+                # typically proxies to fget.__doc__). If no fget, nothing to do.
+                fget = val.fget
+                if fget is None:
+                    continue
+                needs_inherit = (fget.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        fget.__doc__ = doc
+            else:
+                continue
+
+            if needs_inherit:
                 for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    super_attr = getattr(base, key, None)
+                    if super_attr is None:
+                        continue
+                    # Unwrap descriptors on the base class to get at the
+                    # underlying docstring.
+                    if isinstance(super_attr, (staticmethod, classmethod)):
+                        doc = getattr(super_attr.__func__, '__doc__', None)
+                    else:
+                        doc = getattr(super_attr, '__doc__', None)
+                    if doc:
+                        _set_doc(doc)
                         break
 
         super().__init__(name, bases, dct)
2025-10-02 19:32:08,796 - INFO - Eval script for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/eval.sh; copying to container...
2025-10-02 19:32:35,944 - INFO - Test runtime: 27.09 seconds
2025-10-02 19:32:35,945 - INFO - Test output for astropy__astropy-7166 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/astropy__astropy-7166/test_output.txt
2025-10-02 19:32:36,108 - INFO - Git diff after:
diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d1..eab563041 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,13 +528,50 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
-                is_public_member(key) and
-                val.__doc__ is None):
+            if not is_public_member(key):
+                continue
+
+            # Handle plain functions, staticmethod/classmethod wrappers, and
+            # properties. For each, determine whether the object defined in
+            # this class is missing a docstring and if so, try to inherit it
+            # from the first base class that provides it.
+            if inspect.isfunction(val):
+                needs_inherit = (val.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        val.__doc__ = doc
+            elif isinstance(val, (staticmethod, classmethod)):
+                func = val.__func__
+                needs_inherit = (func.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        func.__doc__ = doc
+            elif isinstance(val, property):
+                # For properties, inherit the fget docstring (property.__doc__
+                # typically proxies to fget.__doc__). If no fget, nothing to do.
+                fget = val.fget
+                if fget is None:
+                    continue
+                needs_inherit = (fget.__doc__ is None)
+                def _set_doc(doc):
+                    if doc is not None:
+                        fget.__doc__ = doc
+            else:
+                continue
+
+            if needs_inherit:
                 for base in cls.__mro__[1:]:
-                    super_method = getattr(base, key, None)
-                    if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                    super_attr = getattr(base, key, None)
+                    if super_attr is None:
+                        continue
+                    # Unwrap descriptors on the base class to get at the
+                    # underlying docstring.
+                    if isinstance(super_attr, (staticmethod, classmethod)):
+                        doc = getattr(super_attr.__func__, '__doc__', None)
+                    else:
+                        doc = getattr(super_attr, '__doc__', None)
+                    if doc:
+                        _set_doc(doc)
                         break
 
         super().__init__(name, bases, dct)
2025-10-02 19:32:36,108 - INFO - Grading answer for astropy__astropy-7166...
2025-10-02 19:32:36,109 - INFO - report: {'astropy__astropy-7166': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/utils/tests/test_misc.py::test_inherit_docstrings']}, 'PASS_TO_PASS': {'success': ['astropy/utils/tests/test_misc.py::test_isiterable', 'astropy/utils/tests/test_misc.py::test_signal_number_to_name_no_failure', 'astropy/utils/tests/test_misc.py::test_skip_hidden', 'astropy/utils/tests/test_misc.py::test_JsonCustomEncoder', 'astropy/utils/tests/test_misc.py::test_check_broadcast', 'astropy/utils/tests/test_misc.py::test_dtype_bytes_or_chars'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-7166: resolved: False
2025-10-02 19:32:36,110 - INFO - Attempting to stop container sweb.eval.astropy__astropy-7166.my_evaluation_run...
2025-10-02 19:32:51,237 - INFO - Attempting to remove container sweb.eval.astropy__astropy-7166.my_evaluation_run...
2025-10-02 19:32:51,244 - INFO - Container sweb.eval.astropy__astropy-7166.my_evaluation_run removed.
