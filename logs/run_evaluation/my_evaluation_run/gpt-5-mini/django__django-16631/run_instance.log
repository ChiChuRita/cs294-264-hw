2025-10-02 19:32:22,036 - INFO - Creating container for django__django-16631...
2025-10-02 19:32:22,074 - INFO - Container for django__django-16631 created: 0e2c957f0cc701ffc318c7d9ad8f69967518f6df2803ad5d8792d14f05bb4ed9
2025-10-02 19:32:22,222 - INFO - Container for django__django-16631 started: 0e2c957f0cc701ffc318c7d9ad8f69967518f6df2803ad5d8792d14f05bb4ed9
2025-10-02 19:32:22,222 - INFO - Intermediate patch for django__django-16631 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-16631/patch.diff, now applying to container...
2025-10-02 19:32:22,401 - INFO - >>>>> Applied Patch:
Checking patch docs/ref/settings.txt...
Applied patch docs/ref/settings.txt cleanly.

2025-10-02 19:32:27,079 - INFO - Git diff before:
diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt
index 41387886c0..76173343d8 100644
--- a/docs/ref/settings.txt
+++ b/docs/ref/settings.txt
@@ -2301,19 +2301,24 @@ Default: ``[]``
 A list of fallback secret keys for a particular Django installation. These are
 used to allow rotation of the ``SECRET_KEY``.
 
-In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the
-previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the
-old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready to
-expire the sessions, password reset tokens, and so on, that make use of them.
-
-.. note::
-
-    Signing operations are computationally expensive. Having multiple old key
-    values in ``SECRET_KEY_FALLBACKS`` adds additional overhead to all checks
-    that don't match an earlier key.
-
-    As such, fallback values should be removed after an appropriate period,
-    allowing for key rotation.
+When rotating your secret key, you can set a new ``SECRET_KEY`` and move the
+previous value to the beginning of ``SECRET_KEY_FALLBACKS`` to allow signing
+operations that consult fallback keys to verify values created with older
+keys. For example, the cookie signer (used for signed cookies) and
+:func:`~django.core.signing.loads`/ :func:`~django.core.signing.dumps` (when
+passed ``fallback_keys``) will try the values in ``SECRET_KEY_FALLBACKS`` when
+verifying signatures.
+
+Note, however, that not all uses of the secret key consult
+``SECRET_KEY_FALLBACKS``. In particular,
+:meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`
+calls :func:`~django.utils.crypto.salted_hmac()` without providing an explicit
+``secret`` argument, which causes it to use ``settings.SECRET_KEY`` only.
+Putting an old key into ``SECRET_KEY_FALLBACKS`` will not preserve session
+authentication hashes created by that method; rotating ``SECRET_KEY`` can
+therefore log users out. Remove old values from the end of
+``SECRET_KEY_FALLBACKS`` when you are ready to expire the signed values that
+do make use of them.
 
 Uses of the secret key values shouldn't assume that they are text or bytes.
 Every use should go through :func:`~django.utils.encoding.force_str` or
2025-10-02 19:32:27,080 - INFO - Eval script for django__django-16631 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-16631/eval.sh; copying to container...
2025-10-02 19:32:58,566 - INFO - Test runtime: 31.41 seconds
2025-10-02 19:32:58,566 - INFO - Test output for django__django-16631 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-16631/test_output.txt
2025-10-02 19:32:58,650 - INFO - Git diff after:
diff --git a/docs/ref/settings.txt b/docs/ref/settings.txt
index 41387886c0..76173343d8 100644
--- a/docs/ref/settings.txt
+++ b/docs/ref/settings.txt
@@ -2301,19 +2301,24 @@ Default: ``[]``
 A list of fallback secret keys for a particular Django installation. These are
 used to allow rotation of the ``SECRET_KEY``.
 
-In order to rotate your secret keys, set a new ``SECRET_KEY`` and move the
-previous value to the beginning of ``SECRET_KEY_FALLBACKS``. Then remove the
-old values from the end of the ``SECRET_KEY_FALLBACKS`` when you are ready to
-expire the sessions, password reset tokens, and so on, that make use of them.
-
-.. note::
-
-    Signing operations are computationally expensive. Having multiple old key
-    values in ``SECRET_KEY_FALLBACKS`` adds additional overhead to all checks
-    that don't match an earlier key.
-
-    As such, fallback values should be removed after an appropriate period,
-    allowing for key rotation.
+When rotating your secret key, you can set a new ``SECRET_KEY`` and move the
+previous value to the beginning of ``SECRET_KEY_FALLBACKS`` to allow signing
+operations that consult fallback keys to verify values created with older
+keys. For example, the cookie signer (used for signed cookies) and
+:func:`~django.core.signing.loads`/ :func:`~django.core.signing.dumps` (when
+passed ``fallback_keys``) will try the values in ``SECRET_KEY_FALLBACKS`` when
+verifying signatures.
+
+Note, however, that not all uses of the secret key consult
+``SECRET_KEY_FALLBACKS``. In particular,
+:meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`
+calls :func:`~django.utils.crypto.salted_hmac()` without providing an explicit
+``secret`` argument, which causes it to use ``settings.SECRET_KEY`` only.
+Putting an old key into ``SECRET_KEY_FALLBACKS`` will not preserve session
+authentication hashes created by that method; rotating ``SECRET_KEY`` can
+therefore log users out. Remove old values from the end of
+``SECRET_KEY_FALLBACKS`` when you are ready to expire the signed values that
+do make use of them.
 
 Uses of the secret key values shouldn't assume that they are text or bytes.
 Every use should go through :func:`~django.utils.encoding.force_str` or
2025-10-02 19:32:58,651 - INFO - Grading answer for django__django-16631...
2025-10-02 19:32:58,652 - INFO - report: {'django__django-16631': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_get_user_fallback_secret (auth_tests.test_basic.TestGetUser.test_get_user_fallback_secret)']}, 'PASS_TO_PASS': {'success': ['test_get_user (auth_tests.test_basic.TestGetUser.test_get_user)', 'test_get_user_anonymous (auth_tests.test_basic.TestGetUser.test_get_user_anonymous)', 'The current user model can be retrieved', 'Check the creation and properties of a superuser', 'test_superuser_no_email_or_password (auth_tests.test_basic.BasicTestCase.test_superuser_no_email_or_password)', 'The current user model can be swapped out for another', 'The alternate user setting must point to something in the format app.model', 'The current user model must point to an installed model', 'test_unicode_username (auth_tests.test_basic.BasicTestCase.test_unicode_username)', 'Users can be created and can set their password', 'Users can be created without an email', 'Default User model verbose names are translatable (#19945)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-16631: resolved: False
2025-10-02 19:32:58,653 - INFO - Attempting to stop container sweb.eval.django__django-16631.my_evaluation_run...
2025-10-02 19:33:13,782 - INFO - Attempting to remove container sweb.eval.django__django-16631.my_evaluation_run...
2025-10-02 19:33:13,795 - INFO - Container sweb.eval.django__django-16631.my_evaluation_run removed.
