2025-10-02 19:32:06,134 - INFO - Creating container for django__django-14011...
2025-10-02 19:32:06,241 - INFO - Container for django__django-14011 created: 249b60e3fbec123334226bc03e6dfeb9d4e065648e7e33b1f61ced68af539793
2025-10-02 19:32:06,467 - INFO - Container for django__django-14011 started: 249b60e3fbec123334226bc03e6dfeb9d4e065648e7e33b1f61ced68af539793
2025-10-02 19:32:06,467 - INFO - Intermediate patch for django__django-14011 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-14011/patch.diff, now applying to container...
2025-10-02 19:32:06,634 - INFO - >>>>> Applied Patch:
Checking patch django/core/servers/basehttp.py...
Applied patch django/core/servers/basehttp.py cleanly.

2025-10-02 19:32:10,242 - INFO - Git diff before:
diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index 14dab517c9..d8b07040a4 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -17,6 +17,7 @@ from django.core.exceptions import ImproperlyConfigured
 from django.core.handlers.wsgi import LimitedStream
 from django.core.wsgi import get_wsgi_application
 from django.utils.module_loading import import_string
+from django.db import connections
 
 __all__ = ('WSGIServer', 'WSGIRequestHandler')
 
@@ -193,7 +194,16 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):
             self.rfile, self.wfile, self.get_stderr(), self.get_environ()
         )
         handler.request_handler = self      # backpointer for logging & connection closing
-        handler.run(self.server.get_app())
+        try:
+            handler.run(self.server.get_app())
+        finally:
+            # Ensure database connections are closed in this thread after handling
+            # the request to avoid dangling connections that may prevent the
+            # test database from being torn down.
+            try:
+                connections.close_all()
+            except Exception:
+                pass
 
 
 def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):
2025-10-02 19:32:10,242 - INFO - Eval script for django__django-14011 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-14011/eval.sh; copying to container...
2025-10-02 19:32:44,491 - INFO - Test runtime: 34.20 seconds
2025-10-02 19:32:44,492 - INFO - Test output for django__django-14011 written to logs/run_evaluation/my_evaluation_run/gpt-5-mini/django__django-14011/test_output.txt
2025-10-02 19:32:44,611 - INFO - Git diff after:
diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py
index 14dab517c9..d8b07040a4 100644
--- a/django/core/servers/basehttp.py
+++ b/django/core/servers/basehttp.py
@@ -17,6 +17,7 @@ from django.core.exceptions import ImproperlyConfigured
 from django.core.handlers.wsgi import LimitedStream
 from django.core.wsgi import get_wsgi_application
 from django.utils.module_loading import import_string
+from django.db import connections
 
 __all__ = ('WSGIServer', 'WSGIRequestHandler')
 
@@ -193,7 +194,16 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):
             self.rfile, self.wfile, self.get_stderr(), self.get_environ()
         )
         handler.request_handler = self      # backpointer for logging & connection closing
-        handler.run(self.server.get_app())
+        try:
+            handler.run(self.server.get_app())
+        finally:
+            # Ensure database connections are closed in this thread after handling
+            # the request to avoid dangling connections that may prevent the
+            # test database from being torn down.
+            try:
+                connections.close_all()
+            except Exception:
+                pass
 
 
 def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGIServer):
2025-10-02 19:32:44,611 - INFO - Grading answer for django__django-14011...
2025-10-02 19:32:44,613 - INFO - report: {'django__django-14011': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_live_server_url_is_class_property (servers.tests.LiveServerAddress)', 'Data written to the database by a view can be read.', 'Fixtures are properly loaded and visible to the live server thread.', 'test_check_model_instance_from_subview (servers.tests.LiveServerThreadedTests)', 'test_view_calls_subview (servers.tests.LiveServerThreadedTests)', 'test_404 (servers.tests.LiveServerViews)', 'A HTTP 1.1 server is supposed to support keep-alive. Since our', 'test_environ (servers.tests.LiveServerViews)', 'test_keep_alive_connection_clears_previous_request_data (servers.tests.LiveServerViews)', 'See `test_closes_connection_without_content_length` for details. This', 'test_media_files (servers.tests.LiveServerViews)', 'LiveServerTestCase reports a 404 status code when HTTP client', 'Launched server serves with HTTP 1.1.', 'test_static_files (servers.tests.LiveServerViews)', 'test_view (servers.tests.LiveServerViews)', 'Each LiveServerTestCase binds to a unique port or fails to start a', "LiveServerTestCase.port customizes the server's port."]}, 'PASS_TO_PASS': {'success': ['test_set_up_class (servers.tests.LiveServerTestCaseSetupTest)', 'Contrast to'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-14011: resolved: False
2025-10-02 19:32:44,613 - INFO - Attempting to stop container sweb.eval.django__django-14011.my_evaluation_run...
2025-10-02 19:32:59,741 - INFO - Attempting to remove container sweb.eval.django__django-14011.my_evaluation_run...
2025-10-02 19:32:59,754 - INFO - Container sweb.eval.django__django-14011.my_evaluation_run removed.
