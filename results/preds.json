{
  "psf__requests-2931": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-2931",
    "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3..a616f21 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -80,10 +80,10 @@ class RequestEncodingMixin(object):\n         if parameters are supplied as a dict.\n         \"\"\"\n \n-        if isinstance(data, (str, bytes)):\n-            return to_native_string(data)\n-        elif hasattr(data, 'read'):\n+        if isinstance(data, bytes):\n             return data\n+        elif isinstance(data, str):\n+            return to_native_string(data)\n         elif hasattr(data, '__iter__'):\n             result = []\n             for k, vs in to_key_val_list(data):\n@@ -846,3 +846,4 @@ class Response(object):\n             return self.raw.close()\n \n         return self.raw.release_conn()\n+\n"
  },
  "django__django-11179": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-11179",
    "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n"
  },
  "django__django-7530": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-7530",
    "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 0b39536f5b..e648880ef0 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,7 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_app_config(app_label).get_models()\n             )):\n                 loader.check_consistent_history(connection)\n \n"
  },
  "sympy__sympy-24213": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-24213",
    "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n"
  },
  "astropy__astropy-7166": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d1..9a0fe6fce 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or isinstance(val, property)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n@@ -1127,3 +1127,4 @@ def dtype_bytes_or_chars(dtype):\n     match = re.search(r'(\\d+)$', dtype.str)\n     out = int(match.group(1)) if match else None\n     return out\n+\n"
  },
  "sympy__sympy-17655": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sympy__sympy-17655",
    "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..231820a2a9 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -278,6 +278,8 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    __rmul__ = __mul__\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n"
  },
  "django__django-14011": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14011",
    "model_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..6758440afd 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -79,7 +79,7 @@ class WSGIServer(simple_server.WSGIServer):\n \n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n-    daemon_threads = True\n+    daemon_threads = False\n \n \n class ServerHandler(simple_server.ServerHandler):\n"
  },
  "django__django-13297": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13297",
    "model_patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..62f8f6b129 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -160,10 +160,11 @@ class TemplateView(TemplateResponseMixin, ContextMixin, View):\n         # RemovedInDjango40Warning: when the deprecation ends, replace with:\n         #   context = self.get_context_data()\n         context_kwargs = _wrap_url_kwargs_with_deprecation_warning(kwargs)\n-        context = self.get_context_data(**context_kwargs)\n+        context = self.get_context_data(**kwargs)\n+        for key, value in context_kwargs.items():\n+            context.setdefault(key, value)\n         return self.render_to_response(context)\n \n-\n # RemovedInDjango40Warning\n def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n     context_kwargs = {}\n@@ -238,3 +239,5 @@ class RedirectView(View):\n \n     def patch(self, request, *args, **kwargs):\n         return self.get(request, *args, **kwargs)\n+\n+\n"
  },
  "django__django-16662": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16662",
    "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex a59f0c8dcb..7a6e7426c3 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -175,7 +175,7 @@ class MigrationWriter:\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        sorted_imports = sorted(imports, key=lambda i: (0 if i.split()[0] == 'import' else 1, i.split()[1]))\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n"
  },
  "django__django-10973": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-10973",
    "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7fca6eff30..84dbe66257 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -58,7 +58,7 @@ class DatabaseClient(BaseDatabaseClient):\n                     pass\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=dict(os.environ, **({'PGPASSWORD': passwd} if passwd else {})), check=True)\n         finally:\n             # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n"
  },
  "scikit-learn__scikit-learn-26323": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "scikit-learn__scikit-learn-26323",
    "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 4eddd12b1..7f28a5f42 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -293,6 +293,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             Estimator instance.\n         \"\"\"\n         super().set_output(transform=transform)\n+        # Set output on all specified transformers and on the fitted ones.\n         transformers = (\n             trans\n             for _, trans, _ in chain(\n@@ -302,6 +303,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         )\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n+        # Also configure the remainder estimator if it is an estimator.\n+        if getattr(self, \"remainder\", None) not in (None, \"passthrough\", \"drop\"):\n+            _safe_set_output(self.remainder, transform=transform)\n \n         return self\n \n"
  },
  "django__django-16631": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-16631",
    "model_patch": "diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py\nindex 155330c596..856347f805 100644\n--- a/django/contrib/auth/__init__.py\n+++ b/django/contrib/auth/__init__.py\n@@ -5,7 +5,7 @@ from django.apps import apps as django_apps\n from django.conf import settings\n from django.core.exceptions import ImproperlyConfigured, PermissionDenied\n from django.middleware.csrf import rotate_token\n-from django.utils.crypto import constant_time_compare\n+from django.utils.crypto import constant_time_compare, salted_hmac\n from django.utils.module_loading import import_string\n from django.views.decorators.debug import sensitive_variables\n \n@@ -196,11 +196,19 @@ def get_user(request):\n         if backend_path in settings.AUTHENTICATION_BACKENDS:\n             backend = load_backend(backend_path)\n             user = backend.get_user(user_id)\n-            # Verify the session\n+            # Verify the session. Accept hashes generated with the current\n+            # SECRET_KEY or any keys in SECRET_KEY_FALLBACKS.\n             if hasattr(user, \"get_session_auth_hash\"):\n                 session_hash = request.session.get(HASH_SESSION_KEY)\n-                session_hash_verified = session_hash and constant_time_compare(\n-                    session_hash, user.get_session_auth_hash()\n+                session_hash_verified = session_hash and (\n+                    constant_time_compare(session_hash, user.get_session_auth_hash())\n+                    or any(\n+                        constant_time_compare(\n+                            session_hash,\n+                            salted_hmac(\"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\", user.password, secret=secret, algorithm=\"sha256\").hexdigest(),\n+                        )\n+                        for secret in settings.SECRET_KEY_FALLBACKS or ()\n+                    )\n                 )\n                 if not session_hash_verified:\n                     request.session.flush()\n"
  },
  "psf__requests-1921": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "psf__requests-1921",
    "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4e..d964147 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -53,12 +53,12 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n \n     merged_setting = dict_class(to_key_val_list(session_setting))\n     merged_setting.update(to_key_val_list(request_setting))\n-\n-    # Remove keys that are set to None.\n-    for (k, v) in request_setting.items():\n+    \n+    # Remove keys that are set to None in either session or request settings.\n+    for (k, v) in list(request_setting.items()) + list(session_setting.items()):\n         if v is None:\n             del merged_setting[k]\n-\n+    \n     return merged_setting\n \n \n@@ -567,3 +567,4 @@ def session():\n     \"\"\"Returns a :class:`Session` for context-management.\"\"\"\n \n     return Session()\n+\n"
  },
  "django__django-13810": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-13810",
    "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..eaa9c1c21a 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,11 @@ class BaseHandler:\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n@@ -87,7 +87,6 @@ class BaseHandler:\n \n             handler = convert_exception_to_response(mw_instance)\n             handler_is_async = middleware_is_async\n-\n         # Adapt the top of the stack, if needed.\n         handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n         # We only assign to this when initialization is complete as it is used\n@@ -346,3 +345,5 @@ def reset_urlconf(sender, **kwargs):\n \n \n request_finished.connect(reset_urlconf)\n+\n+\n"
  },
  "pytest-dev__pytest-7490": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "pytest-dev__pytest-7490",
    "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..72bd15594 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -262,6 +262,10 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n     xfailed = item._store.get(xfailed_key, None)\n+    if not item.config.option.runxfail:\n+        # Re-evaluate xfail marks to pick up markers added dynamically during test execution\n+        xfailed = evaluate_xfail_marks(item)\n+        item._store[xfailed_key] = xfailed\n     # unittest special case, see setting of unexpectedsuccess_key\n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n         reason = item._store[unexpectedsuccess_key]\n@@ -313,3 +317,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n     return None\n+\ndiff --git a/test_dynamic_xfail.py b/test_dynamic_xfail.py\nnew file mode 100644\nindex 000000000..71d3ed4e5\n--- /dev/null\n+++ b/test_dynamic_xfail.py\n@@ -0,0 +1,6 @@\n+import pytest\n+\n+def test_xfail_test(request):\n+    mark = pytest.mark.xfail(reason=\"xfail\")\n+    request.node.add_marker(mark)\n+    assert 0\n"
  },
  "sphinx-doc__sphinx-9230": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9230",
    "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex d8cb75a5f..a13a47119 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -912,6 +912,40 @@ def _recombine_set_tokens(tokens: List[str]) -> List[str]:\n             if open_braces == 0:\n                 break\n \n+    def takewhile_paren(tokens):\n+        open_paren = 0\n+        previous_token = None\n+        while True:\n+            try:\n+                token = tokens.popleft()\n+            except IndexError:\n+                break\n+\n+            if token == \", \":\n+                previous_token = token\n+                continue\n+\n+            if not token.strip():\n+                continue\n+\n+            if token in keywords:\n+                tokens.appendleft(token)\n+                if previous_token is not None:\n+                    tokens.appendleft(previous_token)\n+                break\n+\n+            if previous_token is not None:\n+                yield previous_token\n+                previous_token = None\n+\n+            open_paren += token.count(\"(\")\n+            open_paren -= token.count(\")\")\n+\n+            yield token\n+\n+            if open_paren == 0:\n+                break\n+\n     def combine_set(tokens):\n         while True:\n             try:\n@@ -922,6 +956,9 @@ def _recombine_set_tokens(tokens: List[str]) -> List[str]:\n             if token == \"{\":\n                 tokens.appendleft(\"{\")\n                 yield \"\".join(takewhile_set(tokens))\n+            elif \"(\" in token and token.count(\"(\") > token.count(\")\"):\n+                tokens.appendleft(token)\n+                yield \"\".join(takewhile_paren(tokens))\n             else:\n                 yield token\n \n@@ -1336,3 +1373,4 @@ class NumpyDocstring(GoogleDocstring):\n         lines += ['']\n \n         return self._format_admonition('seealso', lines)\n+\n"
  },
  "django__django-14053": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-14053",
    "model_patch": "diff --git a/django/contrib/staticfiles/management/commands/collectstatic.py b/django/contrib/staticfiles/management/commands/collectstatic.py\nindex f7e069b20b..0a3e9de0c2 100644\n--- a/django/contrib/staticfiles/management/commands/collectstatic.py\n+++ b/django/contrib/staticfiles/management/commands/collectstatic.py\n@@ -135,7 +135,8 @@ class Command(BaseCommand):\n                 if processed:\n                     self.log(\"Post-processed '%s' as '%s'\" %\n                              (original_path, processed_path), level=2)\n-                    self.post_processed_files.append(original_path)\n+                    if original_path not in self.post_processed_files:\n+                        self.post_processed_files.append(original_path)\n                 else:\n                     self.log(\"Skipped post-processing '%s'\" % original_path)\n \n"
  },
  "django__django-12406": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "django__django-12406",
    "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..6e241a6e43 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1189,6 +1189,9 @@ class ModelChoiceField(ChoiceField):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n+            from django.forms.widgets import RadioSelect\n+            if required and widget is not None and (isinstance(widget, RadioSelect) or (isinstance(widget, type) and issubclass(widget, RadioSelect))):\n+                self.empty_label = None\n \n         # Call Field instead of ChoiceField __init__() because we don't need\n         # ChoiceField.__init__().\n"
  },
  "sphinx-doc__sphinx-7590": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-7590",
    "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex fe52d881d..3525d8b14 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4664,6 +4664,8 @@ class DefinitionParser(BaseParser):\n             if self.match(regex):\n                 while self.current_char in 'uUlLfF':\n                     self.pos += 1\n+                # accept user-defined literal suffixes (no word-boundary between number and suffix)\n+                self.match(re.compile(r'[A-Za-z_][A-Za-z0-9_]*'))\n                 return ASTNumberLiteral(self.definition[pos:self.pos])\n \n         string = self._parse_string()\n"
  },
  "sphinx-doc__sphinx-9658": {
    "model_name_or_path": "gpt-5-mini",
    "instance_id": "sphinx-doc__sphinx-9658",
    "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 87707d48f..2a8665858 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -192,10 +192,11 @@ def _restify_py37(cls: Optional[Type]) -> str:\n     elif isinstance(cls, typing._SpecialForm):\n         return ':py:obj:`~%s.%s`' % (cls.__module__, cls._name)\n     elif hasattr(cls, '__qualname__'):\n+        qualname = cls.__qualname__ or getattr(type(cls), '__qualname__', None) or getattr(cls, '__name__', '')\n         if cls.__module__ == 'typing':\n-            return ':py:class:`~%s.%s`' % (cls.__module__, cls.__qualname__)\n+            return ':py:class:`~%s.%s`' % (cls.__module__, qualname)\n         else:\n-            return ':py:class:`%s.%s`' % (cls.__module__, cls.__qualname__)\n+            return ':py:class:`%s.%s`' % (cls.__module__, qualname)\n     elif isinstance(cls, ForwardRef):\n         return ':py:class:`%s`' % cls.__forward_arg__\n     else:\n"
  }
}